Assignment 4
Description
In this assignment you must read in a file of metropolitan regions and associated sports teams from assets/wikipedia_data.html and answer some questions about each metropolitan region. Each of these regions may have one or more teams from the "Big 4": NFL (football, in assets/nfl.csv), MLB (baseball, in assets/mlb.csv), NBA (basketball, in assets/nba.csv or NHL (hockey, in assets/nhl.csv). Please keep in mind that all questions are from the perspective of the metropolitan region, and that this file is the "source of authority" for the location of a given sports team. Thus teams which are commonly known by a different area (e.g. "Oakland Raiders") need to be mapped into the metropolitan region given (e.g. San Francisco Bay Area). This will require some human data understanding outside of the data you've been given (e.g. you will have to hand-code some names, and might need to google to find out where teams are)!

For each sport I would like you to answer the question: what is the win/loss ratio's correlation with the population of the city it is in? Win/Loss ratio refers to the number of wins over the number of wins plus the number of losses. Remember that to calculate the correlation with pearsonr, so you are going to send in two ordered lists of values, the populations from the wikipedia_data.html file and the win/loss ratio for a given sport in the same order. Average the win/loss ratios for those cities which have multiple teams of a single sport. Each sport is worth an equal amount in this assignment (20%*4=80%) of the grade for this assignment. You should only use data from year 2018 for your analysis -- this is important!


Question 1
%%capture
#RUN FIRST, installs a missing library
import sys
!{sys.executable} -m pip install lxml
! pip install  openpyxl

import pandas as pd
import numpy as np
import scipy.stats as stats
import re

def nhl_correlation():
    NHL_df=pd.read_csv("assets/nhl.csv")
    cities = pd.read_html("assets/wikipedia_data.html")[1]

    cities = cities.iloc[:-1,[0,3,5,6,7,8]]

    NHL_df = NHL_df[NHL_df.year == 2018]
    NHL_df = NHL_df[["team", "W", "L"]]
    NHL_df.to_excel('NHL.xlsx')
    # remove '*' in the team names
    def remove_star(team):
        if "*" in team:
            return re.findall("([\w\s]*)\*", team)[0]
        else:
            return team
    NHL_df['team'] = NHL_df.team.apply(remove_star)

    # remove bracket in team names
    def remove_bracket(team):
        if "[" in team:
            return re.findall("([\w\s]*)\[", team)[0]
        else:
            return team
    cities['NHL'] = cities.NHL.apply(remove_bracket)

    # discard unnecessary columns
    cities = cities[['Metropolitan area', 'Population (2016 est.)[8]', 'NHL']]

    # split the team name
    NHL_df['team_only'] = NHL_df.team.apply(lambda x: x.rsplit(None, 1)[-1])
    # fix team name error
    NHL_df.loc[3, 'team_only'] = 'Maple Leafs'
    NHL_df.loc[5, 'team_only'] = 'Red Wings'
    NHL_df.loc[13, 'team_only'] = 'Blue Jackets'
    NHL_df.loc[27, 'team_only'] = 'Golden Knights'

    cities.rename(columns={'Metropolitan area':'city', 'Population (2016 est.)[8]':'population', 'NHL':'team_only'}, inplace = True)
    # drop 'Division' word in rows of the 'W' column
    NHL_df = NHL_df[~NHL_df.W.str.contains('Division')]

    # replace the names of the teams of the same city:
    NHL_df.loc[14, 'team_only'] = 'Rangers Islanders Devils'
    NHL_df.loc[16, 'team_only'] = 'Rangers Islanders Devils'
    NHL_df.loc[17, 'team_only'] = 'Rangers Islanders Devils'
    NHL_df.loc[28, 'team_only'] = 'Kings Ducks'
    NHL_df.loc[30, 'team_only'] = 'Kings Ducks'

    # change the data types of wins and loss from str to float
    NHL_df.W = NHL_df.W.astype(float)
    NHL_df.L = NHL_df.L.astype(float)

    # # since there are 4 teams with the same name, lets group them and get their average win,loss values
    NHL_df = NHL_df.groupby(by='team_only')['W', 'L'].mean()

    NHL_df.reset_index(inplace=True)

    merged_df = pd.merge(NHL_df, cities, how = 'inner', on = 'team_only')

    merged_df['win_loss_ration'] = merged_df.W/(merged_df.W + merged_df.L)
    # cities.head()
    # print(len(merged_df))
    # print(cities)
    # print(NHL_df)

    population_by_region = pd.to_numeric(merged_df['population'], errors = 'coerce')
    win_loss_by_region = pd.to_numeric(merged_df['win_loss_ration'], errors = 'coerce')

    return stats.pearsonr(population_by_region, win_loss_by_region)[0]
    
### Question 2
# https://www.youtube.com/watch?v=7OztVWGM2D0
import pandas as pd
import numpy as np
import scipy.stats as stats
import re

def nba_correlation():
    nba_df=pd.read_csv("assets/nba.csv")
    # cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = cities.iloc[:-1, [0,3,5,6,7,8]]
    nba_df = nba_df[nba_df.year == 2018]
    nba_df['team'] = nba_df.team.apply(lambda team: re.findall('([\w\s]*)\*', team)[0] if '*' in team else team)
    nba_df['team'] = nba_df.team.apply(lambda team: re.findall('([\w\s]*)\(', team)[0] if '(' in team else team)
    cities['NBA'] = cities.NBA.apply(lambda team: re.findall('([\w\s]*)\[', team)[0] if '[' in team else team)
    nba_df = nba_df[['team', 'W', 'L']]
    nba_df['team_only'] = nba_df.team.apply(lambda x: x.rsplit(None, 1)[-1])
    nba_df.loc[10, 'team_only'] = 'Knicks Nets'
    nba_df.loc[11, 'team_only'] = 'Knicks Nets'
    nba_df.loc[24, 'team_only'] = 'Lakers Clippers'
    nba_df.loc[25, 'team_only'] = 'Lakers Clippers'
    nba_df.loc[17, 'team_only'] = 'Trail Blazers'
    # nba_df.loc[17, 'team_only'] = 'Trail Blazers'
    cities.rename(columns = {'Metropolitan area' : 'city','Population (2016 est.)[8]' : 'population', 'NBA':'team_only'}, inplace=True)
    nba_df = nba_df[~nba_df.W.str.contains('Division')]
    nba_df.W = nba_df.W.astype(float)
    nba_df.L = nba_df.L.astype(float)
    nba_df = nba_df.groupby(by = 'team_only')['W', 'L'].mean()
    nba_df.reset_index(inplace = True)
    merged_df = pd.merge(nba_df, cities, how = 'inner', on = 'team_only')
    merged_df.W = merged_df.W.astype(float)
    merged_df.L = merged_df.L.astype(float)
    merged_df['win_loss_ration'] = merged_df.W/(merged_df.W + merged_df.L)
    population_by_region = pd.to_numeric(merged_df['population'], errors = 'coerce')
    win_loss_by_region= pd.to_numeric(merged_df['win_loss_ration'], errors = 'coerce')
    return stats.pearsonr(population_by_region, win_loss_by_region)[0]
# len(cities)
# len(population_by_region)
# len(win_loss_by_region)
# nba_df.head()
# print(merged_df)
# print(nba_df)     
# print(cities.team_only)
                             
nba_correlation()   

QUESTION 3

# https://www.youtube.com/watch?v=7OztVWGM2D0
import pandas as pd
import numpy as np
import scipy.stats as stats
import re

def mlb_correlation():
    mlb_df=pd.read_csv("assets/mlb.csv")
    # cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = cities.iloc[:-1, [0,3,5,6,7,8]]
    mlb_df = mlb_df[mlb_df.year == 2018]
    # mlb_df['team'] = mlb_df.team.apply(lambda team: re.findall('([\w\s]*)\*', team)[0] if '*' in team else team)
    # mlb_df['team'] = mlb_df.team.apply(lambda team: re.findall('([\w\s]*)\(', team)[0] if '(' in team else team)
    cities['MLB'] = cities.MLB.apply(lambda team: re.findall('([\w\s]*)\[', team)[0] if '[' in team else team)
    mlb_df = mlb_df[['team', 'W', 'L']]
    mlb_df['team_only'] = mlb_df.team.apply(lambda x: x.rsplit(None, 1)[-1])
    mlb_df.loc[13, 'team_only'] = 'Dodgers Angels'
    mlb_df.loc[25, 'team_only'] = 'Dodgers Angels'
    mlb_df.loc[1, 'team_only'] = 'Yankees Mets'
    mlb_df.loc[18, 'team_only'] = 'Yankees Mets'
    mlb_df.loc[11, 'team_only'] = 'Giants Athletics'
    mlb_df.loc[28, 'team_only'] = 'Giants Athletics'
    mlb_df.loc[21, 'team_only'] = 'Cubs White Sox'
    mlb_df.loc[8, 'team_only'] = 'Cubs White Sox'
    mlb_df.loc[0, 'team_only'] = 'Red Sox'
    mlb_df.loc[3, 'team_only'] = 'Blue Jays'
    cities.rename(columns = {'Metropolitan area' : 'city','Population (2016 est.)[8]' : 'population', 'MLB':'team_only'}, inplace=True)
    # nba_df = nba_df[~nba_df.W.str.contains('Division')]
    mlb_df.W = mlb_df.W.astype(float)
    mlb_df.L = mlb_df.L.astype(float)
    mlb_df = mlb_df.groupby(by = 'team_only')['W', 'L'].mean()
    mlb_df.reset_index(inplace = True)
    merged_df = pd.merge(mlb_df, cities, how = 'inner', on = 'team_only')
    # merged_df.W = merged_df.W.astype(float)
    # merged_df.L = merged_df.L.astype(float)
    merged_df['win_loss_ration'] = merged_df.W/(merged_df.W + merged_df.L)
    population_by_region = pd.to_numeric(merged_df['population'], errors = 'coerce')
    win_loss_by_region= pd.to_numeric(merged_df['win_loss_ration'], errors = 'coerce')
    return stats.pearsonr(population_by_region, win_loss_by_region)[0]
# len(cities)
# len(population_by_region)
# len(win_loss_by_region)
# nba_df.head()
# print(merged_df)
# print(mlb_df)
# print(cities.team_only)
                             
mlb_correlation()                              


QUESTION 4
import pandas as pd
import numpy as np
import scipy.stats as stats
import re

def nfl_correlation():
    nfl_df=pd.read_csv("assets/nfl.csv")
    # cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = pd.read_html("assets/wikipedia_data.html")[1]
    cities = cities.iloc[:-1, [0,3,5,6,7,8]]
    nfl_df = nfl_df[nfl_df.year == 2018]
    nfl_df = nfl_df[~nfl_df.W.str.contains('|'.join(['AFC', 'NFC']))]
    nfl_df['team'] = nfl_df.team.apply(lambda team: re.findall('([\w\s]*)\*', team)[0] if '*' in team else team)
    nfl_df['team'] = nfl_df.team.apply(lambda team: re.findall('([\w\s]*)\+', team)[0] if '+' in team else team)
    cities['NFL'] = cities.NFL.apply(lambda team: re.findall('([\w\s]*)\[', team)[0] if '[' in team else team)
    nfl_df = nfl_df[['team', 'W', 'L']]
    nfl_df['team_only'] = nfl_df.team.apply(lambda x: x.rsplit(None, 1)[-1])
    nfl_df.loc[17, 'team_only'] = 'Rams Chargers'
    nfl_df.loc[36, 'team_only'] = 'Rams Chargers'
    nfl_df.loc[24, 'team_only'] = 'Giants Jets'
    nfl_df.loc[4, 'team_only'] = 'Giants Jets'
    nfl_df.loc[19, 'team_only'] = '49ers Raiders'
    nfl_df.loc[38, 'team_only'] = '49ers Raiders'
    cities.rename(columns = {'Metropolitan area' : 'city','Population (2016 est.)[8]' : 'population', 'NFL':'team_only'}, inplace=True)
    # nba_df = nba_df[~nba_df.W.str.contains('Division')]
    nfl_df.W = nfl_df.W.astype(float)
    nfl_df.L = nfl_df.L.astype(float)
    nfl_df = nfl_df.groupby(by = 'team_only')['W', 'L'].mean()
    nfl_df.reset_index(inplace = True)
    merged_df = pd.merge(nfl_df, cities, how = 'inner', on = 'team_only')
    merged_df.W = merged_df.W.astype(float)
    merged_df.L = merged_df.L.astype(float)
    merged_df['win_loss_ration'] = merged_df.W/(merged_df.W + merged_df.L)
    population_by_region = pd.to_numeric(merged_df['population'], errors = 'coerce')
    win_loss_by_region= pd.to_numeric(merged_df['win_loss_ration'], errors = 'coerce')
    return stats.pearsonr(population_by_region, win_loss_by_region)[0]
# len(cities)
# len(population_by_region)
# len(win_loss_by_region)
# nba_df.head()
# print(merged_df)
# print(mlb_df)
# print(cities.team_only)
                             
nfl_correlation()                              


